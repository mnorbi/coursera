/*

 Simple coloring problem in Comet.


 This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
 Also, see my Comet page: http://www.hakank.org/comet 


*/

int t0 = System.getCPUTime();

import cotfd;
Solver<CP> m();
enum Country = {Belgium, Denmark, France, Germany, Netherlands, Luxembourg};
enum Colors  = {blue, red, yellow, gray};
// range Colors = 1..4;


// neighbours
int num_edges = 9;
Country neighbours[1..num_edges, 1..2] =
  [
   [France, Belgium],
   [France, Luxembourg],
   [France, Germany],
   [Luxembourg, Germany],
   [Luxembourg, Belgium],
   [Belgium, Netherlands],
   [Belgium, Germany],
   [Germany, Netherlands],
   [Germany, Denmark]
   ];

var<CP>{int} color[Country](m,1..4);

Integer num_solutions(0); 

exploreall<m> {

  // Check the neighbours
  forall(i in 1..num_edges)
    m.post(color[neighbours[i,1]] != color[neighbours[i,2]]);

  // symmetry breaking
  // m.post(color[Belgium] == blue);
  m.post(color[Belgium] == 1);

} using {

  labelFF(m);

  // testing different labeling strategies
  // label(m);
  // forall(i in Country : !color[i].bound()) by (-color[i].getSize()) {
  //  label(color[i]);
  //}

  num_solutions := num_solutions+1;
  cout << num_solutions << ": " << color << endl;

}

cout << "It was " << num_solutions << " solutions." << endl;

int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;
cout << "isFeasible  = " << m.isFeasible() << endl;

