/*

 Simple coloring problem in Comet.

 From Pascal Van Hentenryck "The OPL Optimization Programming Language", 
 page 7, 42.

 Note: a somewhat generalized model is in country_cp.co.

 This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
 Also, see my Comet page: http://www.hakank.org/comet 


*/

int t0 = System.getCPUTime();

import cotfd;

enum Country = {Belgium, Denmark, France, Germany, Netherlands, Luxembourg};
enum Colors  = {blue, red, yellow, gray};


Solver<CP> m();
var<CP>{int} color[Country](m,Colors);

Integer num_solutions(0); 

exploreall<m> {

  
  m.post(color[France] != color[Belgium]);
  m.post(color[France] != color[Luxembourg]);
  m.post(color[France] != color[Germany]);
  m.post(color[Luxembourg] != color[Germany]);
  m.post(color[Luxembourg] != color[Belgium]);
  m.post(color[Belgium] != color[Netherlands]);
  m.post(color[Belgium] != color[Germany]);
  m.post(color[Germany] != color[Netherlands]);
  m.post(color[Germany] != color[Denmark]);

} using {

  labelFF(m);

  num_solutions++;
  cout << num_solutions << ": " << color << endl;

}

cout << "It was " << num_solutions << " solutions." << endl;

int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;
cout << "isFeasible  = " << m.isFeasible() << endl;

